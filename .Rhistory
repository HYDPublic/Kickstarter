auc_L1 <- performance(pred_L1, "auc")
auc_L1 <- unlist(slot(auc_L1, "y.values"))
pred_L2 <- prediction(p_L2, test$success)
auc_L2 <- performance(pred_L2, "auc")
auc_L2 <- unlist(slot(auc_L2, "y.values"))
summary_regularization <- tibble(
method = c("Original", "L1", "L2"),
value = c(best_models_by_num_features$auc_test[max_index], auc_L1, auc_L2)
)
summary_regularization
write.csv(test, 'test.csv')
write.csv(train, 'train.csv')
test <- read.csv('test.csv')
train <- read.csv('train.csv')
#-------------------------- Logistic Regression -------------------------------------------------
# set up for logistic regression model, most importantly specifying which features to omit
num_vars <- 19
measureVar <- "success"
features <- colnames(model_data, do.NULL = TRUE)
features_to_remove <- c("success", "campaignTitle", "description", "url", "creator",
"location", "valuta", "currency", "viewGallery", "countryState",
"city", "numLiveCampaigns", "category", "numSuccessfulCampaigns",
"comments")
features <- features[!features %in% features_to_remove]
modelSoFar <- paste(measureVar, " ~ 1 ")
possible <- features
# tibble to summarize models generated by forward stepwise regression
log_reg_summary <- tibble(
num_features = 0,
feature_added = "",
equation = "",
auc_training = 0,
auc_test = 0
)
# using forward stepwise regression to determine the best model
# for each number of possible features in the model
for(i in 1:num_vars) {
# initialize vectors to store AUC values for training and test sets
AUCs_train <- rep(0, length(possible))
AUCs_test <- rep(0, length(possible))
# for each remaining feature, add it to the current model
for(j in 1:length(possible)) {
formula <- paste(modelSoFar, " + ", possible[j])
sprintf(formula)
logreg_model <- glm(as.formula(formula), data = train, family = 'binomial')
# make predictions on the training set using the model
p <- predict(logreg_model, train, type = "response")
pred <- prediction(p, train$success)
auc <- performance(pred, "auc")
auc <- unlist(slot(auc, "y.values"))
AUCs_train[j] <- auc
# make predictions on the test set using the model
p <- predict(logreg_model, test, type = "response")
pred <- prediction(p, test$success)
auc <- performance(pred, "auc")
auc <- unlist(slot(auc, "y.values"))
AUCs_test[j] <- auc
# summarize model performance
log_reg_summary <- add_row(log_reg_summary, num_features = i, feature_added = possible[j],
equation = formula, auc_training = AUCs_train[j],
auc_test = AUCs_test[j])
}
# after comparing each remaining feature, choose the feature that improved the test AUC the most
max_index <- which.max(AUCs_test)
modelSoFar <- paste(modelSoFar, " + ", possible[max_index])
possible <- possible[-max_index]
}
log_reg_summary <- log_reg_summary[-1,]
# for each number of features, select the best model
best_models_by_num_features <- log_reg_summary %>%
group_by(num_features) %>%
arrange(desc(auc_test)) %>%
slice(1)
# plot of training and test AUCs for the best model for each number of features
auc_plot <- ggplot(data = best_models_by_num_features, aes(x = num_features)) +
geom_line(aes(y = auc_training, color = "training")) +
geom_line(aes(y = auc_test, color = "test")) +
xlab('\nNumber of Features') +
ylab('AUC\n') +
ggtitle('Training & Test AUC vs # of Features\n') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_colour_manual("",
breaks = c("training", "test"),
values = c("red","blue"))
auc_plot
# select best model from the above list by choosing the one with the highest test AUC
threshold <- 0.5
max_index <- which.max(best_models_by_num_features$auc_test)
best_model <- glm(as.formula(best_models_by_num_features$equation[max_index]), data = train, family = 'binomial')
summary(best_model)
test<- test %>%
mutate(prob_success = predict(best_model, test, type = 'response'),
pred_success = (prob_success > threshold))
best_models_by_num_features$equation[max_index]
# compute accuracy of the best model
accuracy <- mean(test$pred_success == test$success)
# compute precision of the best model
pos_predictions <- test %>%
filter(pred_success == 1)
precision <- mean(pos_predictions$pred_success == pos_predictions$success)
# compute recall of the best model
pos_results <- test %>%
filter(success == 1)
recall <- mean(pos_results$pred_success == pos_results$success)
# summarize best model performance
best_model_summary <- tibble(
measure = c('Accuracy', 'Precision', 'Recall'),
value = c(accuracy, precision, recall)
)
best_model_summary
#--------------------------- Regularization for Logistic Regression -----------------------------
# L1 regularization model
x <- model.matrix(as.formula(best_models_by_num_features$equation[max_index]), train)[,-1]
y<- train$success
model_L1 <- glmnet(x, y, alpha = 1, lambda = 0.01, family="binomial")
# L2 regularization model
model_L2 <- glmnet(x, y, alpha = 0, lambda = 0.01, family="binomial")
# new predictions
x <- model.matrix(as.formula(best_models_by_num_features$equation[max_index]), test)[,-1]
p_L1 <- predict(model_L1, newx = x, type = "response")
p_L2 <- predict(model_L2, newx = x, type = "response")
pred_L1 <- prediction(p_L1, test$success)
auc_L1 <- performance(pred_L1, "auc")
auc_L1 <- unlist(slot(auc_L1, "y.values"))
pred_L2 <- prediction(p_L2, test$success)
auc_L2 <- performance(pred_L2, "auc")
auc_L2 <- unlist(slot(auc_L2, "y.values"))
summary_regularization <- tibble(
method = c("Original", "L1", "L2"),
value = c(best_models_by_num_features$auc_test[max_index], auc_L1, auc_L2)
)
summary_regularization
#--------------------------- Random Forest ------------------------------------------------------
runApp()
runApp()
library(shiny)
model_formula <- "success  ~ 1   +  backed  +  numImages  +  goal  +  mainCategory  +  campaignDuration  +  created  +  numCollaborators  +  title_word_ct  +  title_word_match"
categories <- c('Games','Design','Technology','Film & Video','Music','Publishing','Fashion','Food','Art','Comics','Theater','Photography','Crafts','Dance','Journalism')
ui <- fluidPage(
headerPanel('Will Your Kickstarter Campaign Be Successful?'),
textInput(inputId = 'title',label = 'Campaign Title'),
selectInput(inputId = 'category', label = 'Campaign Category', choices = categories, selected = NULL, multiple = FALSE),
numericInput(inputId = 'goal', label = 'Campaign Fundraising Goal (in USD)'),
numericInput(inputId = 'duration', label = 'Campaign Duration (in days)'),
numericInput(inputId = 'collaborators', label = 'Number of Project Collaborators'),
numericInput(inputId = 'images', label = 'How many images are on your campaign profile?'),
numericInput(inputId = 'created', label = 'How many Kickstarter campaigns have you launched previously?'),
numericInput(inputId = 'backed', label = 'How many Kickstarter campaigns have you backed?')
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
clear()
clear
runApp()
runApp()
runApp()
runApp()
inputs <- tibble(
backed = 0,
numImages = 1,
goal = 5000,
mainCategory = 'Art',
campaignDuration= 30,
created = 1,
numCollaborators = 0,
title_word_ct = 7,
title_word_match = 3
)
random_test = predict(best_model, inputs, type = 'response')
random_test
install.packages('qdap')
runApp()
library(shiny)
library(qdap)
library(tidyverse)
library(ggplot2)
library(dplyr)
train <- read.csv('train.csv')
model_formula <- "success  ~ 1   +  backed  +  numImages  +  goal  +  mainCategory  +  campaignDuration  +  created  +  numCollaborators  +  title_word_ct  +  title_word_match"
best_model <- glm(as.formula(model_formula), data = train, family = 'binomial')
categories <- c('Games','Design','Technology','Film & Video','Music','Publishing','Fashion','Food','Art','Comics','Theater','Photography','Crafts','Dance','Journalism')
ui <- fluidPage(
headerPanel('Will Your Kickstarter Campaign Be Successful?'),
textInput(inputId = 'title',label = 'Campaign Title'),
selectInput(inputId = 'category', label = 'Campaign Category', choices = categories, selected = NULL, multiple = FALSE),
numericInput(inputId = 'goal', label = 'Campaign Fundraising Goal (in USD)', value = 0, min = 0, step = 100),
numericInput(inputId = 'duration', label = 'Campaign Duration (in days)', value = 30, min = 0, max = 100, step = 5),
numericInput(inputId = 'collaborators', label = 'Number of Project Collaborators', value = 0, min = 0, step = 1),
numericInput(inputId = 'images', label = 'How many images are on your campaign profile?', value = 0, min = 0, step = 1),
numericInput(inputId = 'created', label = 'How many Kickstarter campaigns have you launched previously?', value = 0, min = 0, step = 1),
numericInput(inputId = 'backed', label = 'How many Kickstarter campaigns have you backed?', value = 0, min = 0, step = 1),
actionButton(inputId = 'calculate', label = 'Calculate my chance of success!')
)
server <- function(input, output) {
observeEvent(input$calculate, {
inputs <- tibble(
backed = input$backed,
numImages = input$images,
goal = input$goal,
mainCategory = input$category,
campaignDuration= input$duration,
created = input$created,
numCollaborators = input$collaborators,
title_word_ct = wc(input$title),
title_word_match = 3
)
random_test = predict(best_model, inputs, type = 'response')
random_test
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(qdap)
library(tidyverse)
library(ggplot2)
library(dplyr)
train <- read.csv('train.csv')
model_formula <- "success  ~ 1   +  backed  +  numImages  +  goal  +  mainCategory  +  campaignDuration  +  created  +  numCollaborators  +  title_word_ct  +  title_word_match"
best_model <- glm(as.formula(model_formula), data = train, family = 'binomial')
categories <- c('Games','Design','Technology','Film & Video','Music','Publishing','Fashion','Food','Art','Comics','Theater','Photography','Crafts','Dance','Journalism')
ui <- fluidPage(
headerPanel('Will Your Kickstarter Campaign Be Successful?'),
textInput(inputId = 'title',label = 'Campaign Title'),
selectInput(inputId = 'category', label = 'Campaign Category', choices = categories, selected = NULL, multiple = FALSE),
numericInput(inputId = 'goal', label = 'Campaign Fundraising Goal (in USD)', value = 0, min = 0, step = 100),
numericInput(inputId = 'duration', label = 'Campaign Duration (in days)', value = 30, min = 0, max = 100, step = 5),
numericInput(inputId = 'collaborators', label = 'Number of Project Collaborators', value = 0, min = 0, step = 1),
numericInput(inputId = 'images', label = 'How many images are on your campaign profile?', value = 0, min = 0, step = 1),
numericInput(inputId = 'created', label = 'How many Kickstarter campaigns have you launched previously?', value = 0, min = 0, step = 1),
numericInput(inputId = 'backed', label = 'How many Kickstarter campaigns have you backed?', value = 0, min = 0, step = 1),
actionButton(inputId = 'calculate', label = 'Calculate my chance of success!')
)
server <- function(input, output) {
observeEvent(input$calculate, {
inputs <- tibble(
backed = input$backed,
numImages = input$images,
goal = input$goal,
mainCategory = input$category,
campaignDuration= input$duration,
created = input$created,
numCollaborators = input$collaborators,
title_word_ct = wc(input$title),
title_word_match = 3
)
prediction = predict(best_model, inputs, type = 'response')
renderText(prediction)
}
)
}
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(stringr)
train <- read.csv('train.csv')
model_formula <- "success  ~ 1   +  backed  +  numImages  +  goal  +  mainCategory  +  campaignDuration  +  created  +  numCollaborators  +  title_word_ct  +  title_word_match"
best_model <- glm(as.formula(model_formula), data = train, family = 'binomial')
categories <- c('Games','Design','Technology','Film & Video','Music','Publishing','Fashion','Food','Art','Comics','Theater','Photography','Crafts','Dance','Journalism')
getWordCount <- function(title) {
return(0)
}
ui <- fluidPage(
headerPanel('Will Your Kickstarter Campaign Be Successful?'),
textInput(inputId = 'title',label = 'Campaign Title'),
selectInput(inputId = 'category', label = 'Campaign Category', choices = categories, selected = NULL, multiple = FALSE),
numericInput(inputId = 'goal', label = 'Campaign Fundraising Goal (in USD)', value = 0, min = 0, step = 100),
numericInput(inputId = 'duration', label = 'Campaign Duration (in days)', value = 30, min = 0, max = 100, step = 5),
numericInput(inputId = 'collaborators', label = 'Number of Project Collaborators', value = 0, min = 0, step = 1),
numericInput(inputId = 'images', label = 'How many images are on your campaign profile?', value = 0, min = 0, step = 1),
numericInput(inputId = 'created', label = 'How many Kickstarter campaigns have you launched previously?', value = 0, min = 0, step = 1),
numericInput(inputId = 'backed', label = 'How many Kickstarter campaigns have you backed?', value = 0, min = 0, step = 1),
actionButton(inputId = 'calculate', label = 'Calculate my chance of success!')
)
server <- function(input, output) {
observeEvent(input$calculate, {
inputs <- tibble(
backed = input$backed,
numImages = input$images,
goal = input$goal,
mainCategory = input$category,
campaignDuration= input$duration,
created = input$created,
numCollaborators = input$collaborators,
title_word_ct = getWordCount(input$title),
title_word_match = 3
)
prediction = predict(best_model, inputs, type = 'response')
renderText(str(prediction))
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(stringr)
train <- read.csv('train.csv')
model_formula <- "success  ~ 1   +  backed  +  numImages  +  goal  +  mainCategory  +  campaignDuration  +  created  +  numCollaborators  +  title_word_ct  +  title_word_match"
best_model <- glm(as.formula(model_formula), data = train, family = 'binomial')
categories <- c('Games','Design','Technology','Film & Video','Music','Publishing','Fashion','Food','Art','Comics','Theater','Photography','Crafts','Dance','Journalism')
getWordCount <- function(title) {
return(0)
}
ui <- fluidPage(
headerPanel('Will Your Kickstarter Campaign Be Successful?'),
textInput(inputId = 'title',label = 'Campaign Title'),
selectInput(inputId = 'category', label = 'Campaign Category', choices = categories, selected = NULL, multiple = FALSE),
numericInput(inputId = 'goal', label = 'Campaign Fundraising Goal (in USD)', value = 0, min = 0, step = 100),
numericInput(inputId = 'duration', label = 'Campaign Duration (in days)', value = 30, min = 0, max = 100, step = 5),
numericInput(inputId = 'collaborators', label = 'Number of Project Collaborators', value = 0, min = 0, step = 1),
numericInput(inputId = 'images', label = 'How many images are on your campaign profile?', value = 0, min = 0, step = 1),
numericInput(inputId = 'created', label = 'How many Kickstarter campaigns have you launched previously?', value = 0, min = 0, step = 1),
numericInput(inputId = 'backed', label = 'How many Kickstarter campaigns have you backed?', value = 0, min = 0, step = 1),
actionButton(inputId = 'calculate', label = 'Calculate my chance of success!')
)
server <- function(input, output) {
observeEvent(input$calculate, {
inputs <- tibble(
backed = input$backed,
numImages = input$images,
goal = input$goal,
mainCategory = input$category,
campaignDuration= input$duration,
created = input$created,
numCollaborators = input$collaborators,
title_word_ct = getWordCount(input$title),
title_word_match = 3
)
prediction = predict(best_model, inputs, type = 'response')
prediction
}
)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(stringr)
train <- read_csv('train.csv')
explore_data <- read_csv('explore.csv')
model_formula <- "success  ~ 1   +  backed  +  numImages  +  goal  +  mainCategory  +  campaignDuration  +  created  +  numCollaborators  +  title_word_ct  +  title_word_match"
best_model <- glm(as.formula(model_formula), data = train, family = 'binomial')
categories <- c('Games','Design','Technology','Film & Video','Music','Publishing','Fashion','Food','Art','Comics','Theater','Photography','Crafts','Dance','Journalism')
category_success_rates <- explore_data %>%
group_by(mainCategory) %>%
summarize(success_rate = 100* mean(success))
getWordCount <- function(title) {
words <- str_match_all(title, "\\S+" )  # Sequences of non-spaces
return(length(words[[1]]))
}
getTitleMatch <- function(campaignTitle) {
title <- tolower(campaignTitle)
words <- str_match_all(title, "\\S+" )
wordmap <- read_csv('wordmap.csv', col_names = FALSE)
colnames(wordmap) <- c("Word","Count")
match <- 0
for (i in 1:length(words)) {
word <- words[i]
if(word %in% wordmap$Word) {}
match <- match + 1
}
return(match)
}
ui <- fluidPage(
headerPanel('Will Your Kickstarter Campaign Be Successful?'),
textInput(inputId = 'title',label = 'Campaign Title'),
selectInput(inputId = 'category', label = 'Campaign Category', choices = categories, selected = NULL, multiple = FALSE),
numericInput(inputId = 'goal', label = 'Campaign Fundraising Goal (in USD)', value = 0, min = 0, step = 100),
numericInput(inputId = 'duration', label = 'Campaign Duration (in days)', value = 30, min = 0, max = 100, step = 5),
numericInput(inputId = 'collaborators', label = 'Number of Project Collaborators', value = 0, min = 0, step = 1),
numericInput(inputId = 'images', label = 'How many images are on your campaign profile?', value = 0, min = 0, step = 1),
numericInput(inputId = 'created', label = 'How many Kickstarter campaigns have you launched previously?', value = 0, min = 0, step = 1),
numericInput(inputId = 'backed', label = 'How many Kickstarter campaigns have you backed?', value = 0, min = 0, step = 1),
actionButton(inputId = 'calculate', label = 'Calculate my chance of success!'),
textOutput('response')
)
server <- function(input, output) {
observeEvent(input$calculate, {
inputs <- tibble(
backed = input$backed,
numImages = input$images,
goal = input$goal,
mainCategory = input$category,
campaignDuration= input$duration,
created = input$created,
numCollaborators = input$collaborators,
title_word_ct = getWordCount(input$title),
title_word_match = getTitleMatch(input$title)
)
prediction = predict(best_model, inputs, type = 'response')
output$response <- renderText(paste('Your probability is: ',prediction, '.'))
}
)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
mostBackedTitles <- read_file('mostBackedTitles.txt')
makeWordCloud(mostBackedTitles, 'Words Common Used in the Titles of the Most Backed Campaigns')
makeWordCloud(mostBackedTitles, 'Words Commonly Used in the Titles of the Most Backed Campaigns')
makeWordCloud(mostBackedTitles, 'Most Backed Titles Wordcloud')
makeWordCloud(mostBackedTitles, 'Most Backed Titles Wordcloud')
makeWordCloud(mostBackedTitles, 'Most Backed Titles Wordcloud')
makeWordCloud(mostBackedTitles, 'Most Backed Titles Wordcloud')
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(stringr)
train <- read_csv('train.csv')
explore_data <- read_csv('explore.csv')
model_formula <- "success  ~ 1   +  backed  +  numImages  +  goal  +  mainCategory  +  campaignDuration  +  created  +  numCollaborators  +  title_word_ct  +  title_word_match"
best_model <- glm(as.formula(model_formula), data = train, family = 'binomial')
categories <- c('Games','Design','Technology','Film & Video','Music','Publishing','Fashion','Food','Art','Comics','Theater','Photography','Crafts','Dance','Journalism')
category_success_rates <- explore_data %>%
group_by(mainCategory) %>%
summarize(success_rate = 100* mean(success))
colnames(category_success_rates) <- c("Category","Success Rate (%)")
getWordCount <- function(title) {
words <- str_match_all(title, "\\S+" )  # Sequences of non-spaces
return(length(words[[1]]))
}
getTitleMatch <- function(campaignTitle) {
title <- tolower(campaignTitle)
words <- str_match_all(title, "\\S+" )
wordmap <- read_csv('wordmap.csv', col_names = FALSE)
colnames(wordmap) <- c("Word","Count")
match <- 0
for (i in 1:length(words)) {
word <- words[i]
if(word %in% wordmap$Word) {}
match <- match + 1
}
return(match)
}
ui <- fluidPage(
headerPanel('Will Your Kickstarter Campaign Be Successful?'),
column(width = 6,
fluidRow(
tags$br(),
tags$br(),
textInput(inputId = 'title',label = 'Campaign Title'),
selectInput(inputId = 'category', label = 'Campaign Category', choices = categories, selected = NULL, multiple = FALSE),
numericInput(inputId = 'goal', label = 'Campaign Fundraising Goal (in USD)', value = 0, min = 0, step = 100),
numericInput(inputId = 'duration', label = 'Campaign Duration (in days)', value = 30, min = 0, max = 100, step = 5),
numericInput(inputId = 'collaborators', label = 'Number of Project Collaborators', value = 0, min = 0, step = 1),
numericInput(inputId = 'images', label = 'How many images are on your campaign profile?', value = 0, min = 0, step = 1),
numericInput(inputId = 'created', label = 'How many Kickstarter campaigns have you launched previously?', value = 0, min = 0, step = 1),
numericInput(inputId = 'backed', label = 'How many Kickstarter campaigns have you backed?', value = 0, min = 0, step = 1),
actionButton(inputId = 'calculate', label = 'Calculate my chance of success!')
)
),
column(6,
tags$br(),
tags$br(),
textOutput('response'),
tableOutput(outputId = 'categorySuccess')
)
)
server <- function(input, output) {
output$categorySuccess <- renderTable(category_success_rates, stripes = TRUE)
observeEvent(input$calculate, {
inputs <- tibble(
backed = input$backed,
numImages = input$images,
goal = input$goal,
mainCategory = input$category,
campaignDuration= input$duration,
created = input$created,
numCollaborators = input$collaborators,
title_word_ct = getWordCount(input$title),
title_word_match = getTitleMatch(input$title)
)
prediction = predict(best_model, inputs, type = 'response')
output$response <- renderText(paste('Your probability is: ',prediction, '.'))
}
)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
summary(best_model)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(best_model)
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='nbenavides',
token='1DAE94DD3DEA4EA25538EADEFCF8C54B',
secret='foTd85CDmCm6OGFh8QF2ebo62lZNS8gHdKi5PsEL')
rsconnect::setAccountInfo(name='nbenavides', token='1DAE94DD3DEA4EA25538EADEFCF8C54B',secret='foTd85CDmCm6OGFh8QF2ebo62lZNS8gHdKi5PsEL')
runApp()
